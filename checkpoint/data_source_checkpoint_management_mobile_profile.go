package checkpoint

import (
	"fmt"
	checkpoint "github.com/CheckPointSW/cp-mgmt-api-go-sdk/APIFiles"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"log"
)

func dataSourceManagementMobileProfile() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceManagementMobileProfileRead,

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Object name.",
			},
			"uid": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Object unique identifier.",
			},
			"applications": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Applications settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_print_mails": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow to print mails.",
						},
						"max_attachments_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Maximum size of attachments allowed for downloading -  you can choose a unit (gbs, kbs, mbs, bytes) in \"max-attachments-unit\" field.",
						},
						"calendar_from_the_last": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "How far back to see your Calendar from the current date - you can choose a unit (day, week, month) in \"calendar-from-the-last-unit\" field.",
						},
						"calendar_from_the_last_unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Unit for \"calendar-from-the-last\" numeric value.",
						},
						"calendar_to_the_following": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "How much ahead to see your Calendar from the current date - you can choose a unit (day, week, month) in \"calendar-to-the-following-unit\" field.",
						},
						"calendar_to_the_following_unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Unit for \"calendar-to-the-following\" numeric value.",
						},
						"mail_from_the_last": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "How far back to see your emails from the current date - choose a unit (day, week, month) in \"mail-from-the-last-unit\" field.",
						},
						"mail_from_the_last_unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Unit for \"mail-from-the-last\" numeric value.",
						},
						"synchronize_contacts": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Contacts synchronization method - from the mail server to device and the app and vice versa or from the mail server to device and the app or from the mail server to the app.",
						},
						"allow_push_notification": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow to receive push notifications of mails and meetings.",
						},
						"allow_calendar_sync": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow synchronization between business calendar to device calendar.",
						},
						"allow_contacts_from_global_address_list": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow to add additional contacts from Global Address List to the app.",
						},
						"allow_contacts_from_local_phone": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow to add additional contacts from local phone to the app.",
						},
						"save_local_web_cache": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Configure whether local cache data generated by web browser should be preserved.",
						},
						"allow_caching_docsec_credentials": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow store encrypted document credentials in application secure storage.",
						},
						"allow_caching_docsec_keys": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow store encrypted document keys in application secure storage.",
						},
					},
				},
			},
			"client_customization": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Client customization settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"app_theme_color_dark": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Configure the application display colors in Dark mode. 6 hex digits that define RGB color - relevant for IOS.",
						},
						"app_theme_color_light": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Configure the application display colors in light mode. 6 hex digits that define RGB color - relevant for IOS.",
						},
						"allow_calendar": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow sync business calendar to device calendar.",
						},
						"allow_contacts": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/Disable contacts app.",
						},
						"allow_mail": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/Disable email app.",
						},
						"allow_notes_sync": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow sync business notes to device notes.",
						},
						"allow_saved_file_apps": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow the appearance of 'Saved file app' in the app list.",
						},
						"allow_secure_chat": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/Disable Messages app (depends on Mail app).",
						},
						"allow_tasks": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/Disable Tasks app.",
						},
						"certificate_expire_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "message to show users when certificate is expired - for admin to fill - can contain only English characters, digits, comma, spaces and points.",
						},
					},
				},
			},
			"data_leak_prevention": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Data leak prevention settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"open_extension_with_external_app": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Open the following extensions from your app with external apps when they cannot be opened with Capsule viewer.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"share_protected_extension": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Share protected files extensions to external apps.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"share_unprotected_extension": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Share unprotected files extensions to external apps.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"allow_copy_paste": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow copy paste of mail content.",
						},
						"block_forward_attachments": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow share mail attachments with external mails.",
						},
						"block_screenshot": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "If true - you can't make a screenshot from your app.",
						},
						"allowed_domains_forward_attachment": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "exclusion of domains which attachments are allowed to be sent, even that shared policy prevents sharing these kinds of attached files - can contain only English characters, digits, comma, spaces and points.",
						},
						"accept_protected_file_extensions": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Accept protected files with these extensions from external apps to your app.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"accept_unprotected_file_extensions": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Accept unprotected files with these extensions from external apps to your app.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"allow_import_from_gallery": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow import media from gallery.",
						},
						"allow_taking_photos_and_videos": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow the camera to be used from your app.",
						},
						"offer_capsule_as_viewer": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Offer Capsule as a viewer for external protected documents.",
						},
					},
				},
			},
			"harmony_mobile": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Integrations settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"protect_policy_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/disable Protect Application- cannot be enable if Harmony SDK is enable.",
						},
						"protect_high_risk_action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "What is the action if there is high risk found by Harmony Mobile.",
						},
						"protect_high_risk_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"protect_medium_risk_action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "What is the action if there is medium risk found by Harmony Mobile.",
						},
						"protect_medium_risk_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"protect_not_activated_action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "What is the action if there is policy violation (configuration for Harmony Mobile).",
						},
						"protect_not_activated_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"enable_harmony_mobile_sdk": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Enable/disable Harmony SDK - cannot be enable if Harmony Mobile Application is enable.",
						},
						"compromised_behavior": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Device configuration - response to malicious behavior (configuration for Harmony SDK).",
						},
						"harmony_mobile_sdk_license": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "License for Harmony Mobile Sdk (configuration for Harmony SDK) - can contain only English characters, digits, comma, spaces and point.",
						},
						"malware_behavior": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Behavior when App is identified as malicious (configuration for Harmony SDK).",
						},
						"man_in_the_middle_attack": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Behavior when there is a network man-in-the-middle attack (configuration for Harmony SDK).",
						},
						"os_integrity_compromised": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Behavior when Device OS is compromised (configuration for Harmony SDK).",
						},
						"suspicious_app": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Behavior when App is suspected as malicious (configuration for Harmony SDK).",
						},
						"suspicious_enterprise_certificate": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Behavior when a certificate profile has been installed allowing the installing of apps on device from unknown source - iOS only (configuration for Harmony SDK).",
						},
					},
				},
			},
			"security": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Security settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"session_timeout": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Session timeout - you can choose a unit (day, week, month) in \"session-timeout-unit\" field.",
						},
						"session_timeout_unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Unit for \"session-timeout\" numeric value.",
						},
						"activate_passcode_lock": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Require passcode to the application.",
						},
						"allow_store_credentials": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Allow storing the credentials on the device.",
						},
						"passcode_profile": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Passcode Policy object identified by the name",
						},
						"report_jailbroken": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Issue log when device is detected as jail broken.",
						},
						"block_jailbroken": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Action upon detection of jail broken devices.",
						},
						"block_3rd_party_keyboard": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Block 3rd party keyboard.",
						},
						"hide_ssl_connect_anyway_button": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Hide connect button on critical SSL trust failures.",
						},
					},
				},
			},
			"tags": {
				Type:        schema.TypeSet,
				Computed:    true,
				Description: "Collection of tag identifiers.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"color": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Color of the object. Should be one of existing colors.",
			},
			"comments": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Comments string.",
			},
		},
	}
}

func dataSourceManagementMobileProfileRead(d *schema.ResourceData, m interface{}) error {

	client := m.(*checkpoint.ApiClient)

	name := d.Get("name").(string)
	uid := d.Get("uid").(string)

	payload := make(map[string]interface{})

	if name != "" {
		payload["name"] = name
	} else if uid != "" {
		payload["uid"] = uid
	}

	showMobileProfileRes, err := client.ApiCall("show-mobile-profile", payload, client.GetSessionID(), true, false)
	if err != nil {
		return fmt.Errorf(err.Error())
	}
	if !showMobileProfileRes.Success {
		if objectNotFound(showMobileProfileRes.GetData()["code"].(string)) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf(showMobileProfileRes.ErrorMsg)
	}

	mobileProfile := showMobileProfileRes.GetData()

	log.Println("Read MobileProfile - Show JSON = ", mobileProfile)

	if v := mobileProfile["uid"]; v != nil {
		_ = d.Set("uid", v)
		d.SetId(v.(string))
	}

	if v := mobileProfile["name"]; v != nil {
		_ = d.Set("name", v)
	}

	if mobileProfile["applications"] != nil {

		applicationsMap := mobileProfile["applications"].(map[string]interface{})

		applicationsMapToReturn := make(map[string]interface{})

		if v, _ := applicationsMap["enable-print-mails"]; v != nil {
			applicationsMapToReturn["enable_print_mails"] = v
		}
		if v, _ := applicationsMap["max-attachments-size"]; v != nil {
			applicationsMapToReturn["max_attachments_size"] = v
		}
		if v, _ := applicationsMap["calendar-from-the-last"]; v != nil {
			applicationsMapToReturn["calendar_from_the_last"] = v
		}
		if v, _ := applicationsMap["calendar-from-the-last-unit"]; v != nil {
			applicationsMapToReturn["calendar_from_the_last_unit"] = v
		}
		if v, _ := applicationsMap["calendar-to-the-following"]; v != nil {
			applicationsMapToReturn["calendar_to_the_following"] = v
		}
		if v, _ := applicationsMap["calendar-to-the-following-unit"]; v != nil {
			applicationsMapToReturn["calendar_to_the_following_unit"] = v
		}
		if v, _ := applicationsMap["mail-from-the-last"]; v != nil {
			applicationsMapToReturn["mail_from_the_last"] = v
		}
		if v, _ := applicationsMap["mail-from-the-last-unit"]; v != nil {
			applicationsMapToReturn["mail_from_the_last_unit"] = v
		}
		if v, _ := applicationsMap["synchronize-contacts"]; v != nil {
			applicationsMapToReturn["synchronize_contacts"] = v
		}
		if v, _ := applicationsMap["allow-push-notification"]; v != nil {
			applicationsMapToReturn["allow_push_notification"] = v
		}
		if v, _ := applicationsMap["allow-calendar-sync"]; v != nil {
			applicationsMapToReturn["allow_calendar_sync"] = v
		}
		if v, _ := applicationsMap["allow-contacts-from-global-address-list"]; v != nil {
			applicationsMapToReturn["allow_contacts_from_global_address_list"] = v
		}
		if v, _ := applicationsMap["allow-contacts-from-local-phone"]; v != nil {
			applicationsMapToReturn["allow_contacts_from_local_phone"] = v
		}
		if v, _ := applicationsMap["save-local-web-cache"]; v != nil {
			applicationsMapToReturn["save_local_web_cache"] = v
		}
		if v, _ := applicationsMap["allow-caching-docsec-credentials"]; v != nil {
			applicationsMapToReturn["allow_caching_docsec_credentials"] = v
		}
		if v, _ := applicationsMap["allow-caching-docsec-keys"]; v != nil {
			applicationsMapToReturn["allow_caching_docsec_keys"] = v
		}
		_ = d.Set("applications", []interface{}{applicationsMapToReturn})
	} else {
		_ = d.Set("applications", nil)
	}

	if mobileProfile["client-customization"] != nil {

		clientCustomizationMap := mobileProfile["client-customization"].(map[string]interface{})

		clientCustomizationMapToReturn := make(map[string]interface{})

		if v, _ := clientCustomizationMap["app-theme-color-dark"]; v != nil {
			clientCustomizationMapToReturn["app_theme_color_dark"] = v
		}
		if v, _ := clientCustomizationMap["app-theme-color-light"]; v != nil {
			clientCustomizationMapToReturn["app_theme_color_light"] = v
		}
		if v, _ := clientCustomizationMap["allow-calendar"]; v != nil {
			clientCustomizationMapToReturn["allow_calendar"] = v
		}
		if v, _ := clientCustomizationMap["allow-contacts"]; v != nil {
			clientCustomizationMapToReturn["allow_contacts"] = v
		}
		if v, _ := clientCustomizationMap["allow-mail"]; v != nil {
			clientCustomizationMapToReturn["allow_mail"] = v
		}
		if v, _ := clientCustomizationMap["allow-notes-sync"]; v != nil {
			clientCustomizationMapToReturn["allow_notes_sync"] = v
		}
		if v, _ := clientCustomizationMap["allow-saved-file-apps"]; v != nil {
			clientCustomizationMapToReturn["allow_saved_file_apps"] = v
		}
		if v, _ := clientCustomizationMap["allow-secure-chat"]; v != nil {
			clientCustomizationMapToReturn["allow_secure_chat"] = v
		}
		if v, _ := clientCustomizationMap["allow-tasks"]; v != nil {
			clientCustomizationMapToReturn["allow_tasks"] = v
		}
		if v, _ := clientCustomizationMap["certificate-expire-message"]; v != nil {
			clientCustomizationMapToReturn["certificate_expire_message"] = v
		}
		_ = d.Set("client_customization", []interface{}{clientCustomizationMapToReturn})
	} else {
		_ = d.Set("client_customization", nil)
	}

	if mobileProfile["data-leak-prevention"] != nil {

		dataLeakPreventionMap := mobileProfile["data-leak-prevention"].(map[string]interface{})

		dataLeakPreventionMapToReturn := make(map[string]interface{})

		if v, _ := dataLeakPreventionMap["open-extension-with-external-app"]; v != nil {
			dataLeakPreventionMapToReturn["open_extension_with_external_app"] = v
		}
		if v, _ := dataLeakPreventionMap["share-protected-extension"]; v != nil {
			dataLeakPreventionMapToReturn["share_protected_extension"] = v
		}
		if v, _ := dataLeakPreventionMap["share-unprotected-extension"]; v != nil {
			dataLeakPreventionMapToReturn["share_unprotected_extension"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-copy-paste"]; v != nil {
			dataLeakPreventionMapToReturn["allow_copy_paste"] = v
		}
		if v, _ := dataLeakPreventionMap["block-forward-attachments"]; v != nil {
			dataLeakPreventionMapToReturn["block_forward_attachments"] = v
		}
		if v, _ := dataLeakPreventionMap["block-screenshot"]; v != nil {
			dataLeakPreventionMapToReturn["block_screenshot"] = v
		}
		if v, _ := dataLeakPreventionMap["allowed-domains-forward-attachment"]; v != nil {
			dataLeakPreventionMapToReturn["allowed_domains_forward_attachment"] = v
		}
		if v, _ := dataLeakPreventionMap["accept-protected-file-extensions"]; v != nil {
			dataLeakPreventionMapToReturn["accept_protected_file_extensions"] = v
		}
		if v, _ := dataLeakPreventionMap["accept-unprotected-file-extensions"]; v != nil {
			dataLeakPreventionMapToReturn["accept_unprotected_file_extensions"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-import-from-gallery"]; v != nil {
			dataLeakPreventionMapToReturn["allow_import_from_gallery"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-taking-photos-and-videos"]; v != nil {
			dataLeakPreventionMapToReturn["allow_taking_photos_and_videos"] = v
		}
		if v, _ := dataLeakPreventionMap["offer-capsule-as-viewer"]; v != nil {
			dataLeakPreventionMapToReturn["offer_capsule_as_viewer"] = v
		}
		_ = d.Set("data_leak_prevention", []interface{}{dataLeakPreventionMapToReturn})
	} else {
		_ = d.Set("data_leak_prevention", nil)
	}

	if mobileProfile["harmony-mobile"] != nil {

		harmonyMobileMap := mobileProfile["harmony-mobile"].(map[string]interface{})

		harmonyMobileMapToReturn := make(map[string]interface{})

		if v, _ := harmonyMobileMap["protect-policy-enabled"]; v != nil {
			harmonyMobileMapToReturn["protect_policy_enabled"] = v
		}
		if v, _ := harmonyMobileMap["protect-high-risk-action"]; v != nil {
			harmonyMobileMapToReturn["protect_high_risk_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-high-risk-message"]; v != nil {
			harmonyMobileMapToReturn["protect_high_risk_message"] = v
		}
		if v, _ := harmonyMobileMap["protect-medium-risk-action"]; v != nil {
			harmonyMobileMapToReturn["protect_medium_risk_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-medium-risk-message"]; v != nil {
			harmonyMobileMapToReturn["protect_medium_risk_message"] = v
		}
		if v, _ := harmonyMobileMap["protect-not-activated-action"]; v != nil {
			harmonyMobileMapToReturn["protect_not_activated_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-not-activated-message"]; v != nil {
			harmonyMobileMapToReturn["protect_not_activated_message"] = v
		}
		if v, _ := harmonyMobileMap["enable-harmony-mobile-sdk"]; v != nil {
			harmonyMobileMapToReturn["enable_harmony_mobile_sdk"] = v
		}
		if v, _ := harmonyMobileMap["compromised-behavior"]; v != nil {
			harmonyMobileMapToReturn["compromised_behavior"] = v
		}
		if v, _ := harmonyMobileMap["harmony-mobile-sdk-license"]; v != nil {
			harmonyMobileMapToReturn["harmony_mobile_sdk_license"] = v
		}
		if v, _ := harmonyMobileMap["malware-behavior"]; v != nil {
			harmonyMobileMapToReturn["malware_behavior"] = v
		}
		if v, _ := harmonyMobileMap["man-in-the-middle-attack"]; v != nil {
			harmonyMobileMapToReturn["man_in_the_middle_attack"] = v
		}
		if v, _ := harmonyMobileMap["os-integrity-compromised"]; v != nil {
			harmonyMobileMapToReturn["os_integrity_compromised"] = v
		}
		if v, _ := harmonyMobileMap["suspicious-app"]; v != nil {
			harmonyMobileMapToReturn["suspicious_app"] = v
		}
		if v, _ := harmonyMobileMap["suspicious-enterprise-certificate"]; v != nil {
			harmonyMobileMapToReturn["suspicious_enterprise_certificate"] = v
		}
		_ = d.Set("harmony_mobile", []interface{}{harmonyMobileMapToReturn})
	} else {
		_ = d.Set("harmony_mobile", nil)
	}

	if mobileProfile["security"] != nil {

		securityMap := mobileProfile["security"].(map[string]interface{})

		securityMapToReturn := make(map[string]interface{})

		if v, _ := securityMap["session-timeout"]; v != nil {
			securityMapToReturn["session_timeout"] = v
		}
		if v, _ := securityMap["session-timeout-unit"]; v != nil {
			securityMapToReturn["session_timeout_unit"] = v
		}
		if v, _ := securityMap["activate-passcode-lock"]; v != nil {
			securityMapToReturn["activate_passcode_lock"] = v
		}
		if v, _ := securityMap["allow-store-credentials"]; v != nil {
			securityMapToReturn["allow_store_credentials"] = v
		}

		if v, _ := securityMap["passcode-profile"]; v != nil {
			if v, _ := securityMap["passcode-profile"]; v != nil {
				localMap := v.(map[string]interface{})
				if name := localMap["name"]; name != nil {
					securityMapToReturn["passcode_profile"] = name
				}
			}
		}
		if v, _ := securityMap["report-jailbroken"]; v != nil {
			securityMapToReturn["report_jailbroken"] = v
		}
		if v, _ := securityMap["block-jailbroken"]; v != nil {
			securityMapToReturn["block_jailbroken"] = v
		}
		if v, _ := securityMap["block-3rd-party-keyboard"]; v != nil {
			securityMapToReturn["block_3rd_party_keyboard"] = v
		}
		if v, _ := securityMap["hide-ssl-connect-anyway-button"]; v != nil {
			securityMapToReturn["hide_ssl_connect_anyway_button"] = v
		}
		_ = d.Set("security", []interface{}{securityMapToReturn})
	} else {
		_ = d.Set("security", nil)
	}

	if mobileProfile["tags"] != nil {
		tagsJson, ok := mobileProfile["tags"].([]interface{})
		if ok {
			tagsIds := make([]string, 0)
			if len(tagsJson) > 0 {
				for _, tags := range tagsJson {
					tags := tags.(map[string]interface{})
					tagsIds = append(tagsIds, tags["name"].(string))
				}
			}
			_ = d.Set("tags", tagsIds)
		}
	} else {
		_ = d.Set("tags", nil)
	}

	if v := mobileProfile["color"]; v != nil {
		_ = d.Set("color", v)
	}

	if v := mobileProfile["comments"]; v != nil {
		_ = d.Set("comments", v)
	}

	return nil

}
