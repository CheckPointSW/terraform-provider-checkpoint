package checkpoint

import (
	"fmt"
	checkpoint "github.com/CheckPointSW/cp-mgmt-api-go-sdk/APIFiles"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"log"
)

func resourceManagementMobileProfile() *schema.Resource {
	return &schema.Resource{
		Create: createManagementMobileProfile,
		Read:   readManagementMobileProfile,
		Update: updateManagementMobileProfile,
		Delete: deleteManagementMobileProfile,
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Object name.",
			},
			"applications": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Applications settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_print_mails": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow to print mails.",
							Default:     false,
						},
						"max_attachments_size": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Maximum size of attachments allowed for downloading -  you can choose a unit (gbs, kbs, mbs, bytes) in \"max-attachments-unit\" field.",
							Default:     5,
						},
						"calendar_from_the_last": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "How far back to see your Calendar from the current date - you can choose a unit (day, week, month) in \"calendar-from-the-last-unit\" field.",
							Default:     1,
						},
						"calendar_from_the_last_unit": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unit for \"calendar-from-the-last\" numeric value.",
							Default:     "months",
						},
						"calendar_to_the_following": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "How much ahead to see your Calendar from the current date - you can choose a unit (day, week, month) in \"calendar-to-the-following-unit\" field.",
							Default:     1,
						},
						"calendar_to_the_following_unit": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unit for \"calendar-to-the-following\" numeric value.",
							Default:     "months",
						},
						"mail_from_the_last": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "How far back to see your emails from the current date - choose a unit (day, week, month) in \"mail-from-the-last-unit\" field.",
							Default:     14,
						},
						"mail_from_the_last_unit": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unit for \"mail-from-the-last\" numeric value.",
							Default:     "days",
						},
						"synchronize_contacts": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Contacts synchronization method - from the mail server to device and the app and vice versa or from the mail server to device and the app or from the mail server to the app.",
							Default:     "mail srv to app",
						},
						"allow_push_notification": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow to receive push notifications of mails and meetings.",
							Default:     true,
						},
						"allow_calendar_sync": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow synchronization between business calendar to device calendar.",
							Default:     false,
						},
						"allow_contacts_from_global_address_list": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow to add additional contacts from Global Address List to the app.",
							Default:     true,
						},
						"allow_contacts_from_local_phone": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow to add additional contacts from local phone to the app.",
							Default:     true,
						},
						"save_local_web_cache": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Configure whether local cache data generated by web browser should be preserved.",
							Default:     false,
						},
						"allow_caching_docsec_credentials": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow store encrypted document credentials in application secure storage.",
							Default:     true,
						},
						"allow_caching_docsec_keys": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow store encrypted document keys in application secure storage.",
							Default:     true,
						},
					},
				},
			},
			"client_customization": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Client customization settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"app_theme_color_dark": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Configure the application display colors in Dark mode. 6 hex digits that define RGB color - relevant for IOS.",
							Default:     "fc037b",
						},
						"app_theme_color_light": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Configure the application display colors in light mode. 6 hex digits that define RGB color - relevant for IOS.",
							Default:     "fc037b",
						},
						"allow_calendar": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow sync business calendar to device calendar.",
							Default:     true,
						},
						"allow_contacts": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/Disable contacts app.",
							Default:     true,
						},
						"allow_mail": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/Disable email app.",
							Default:     true,
						},
						"allow_notes_sync": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow sync business notes to device notes.",
							Default:     true,
						},
						"allow_saved_file_apps": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow the appearance of 'Saved file app' in the app list.",
							Default:     true,
						},
						"allow_secure_chat": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/Disable Messages app (depends on Mail app).",
							Default:     true,
						},
						"allow_tasks": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/Disable Tasks app.",
							Default:     true,
						},
						"certificate_expire_message": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "message to show users when certificate is expired - for admin to fill - can contain only English characters, digits, comma, spaces and points.",
							Default:     "",
						},
					},
				},
			},
			"data_leak_prevention": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Data leak prevention settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"open_extension_with_external_app": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Open the following extensions from your app with external apps when they cannot be opened with Capsule viewer.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"share_protected_extension": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Share protected files extensions to external apps.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"share_unprotected_extension": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Share unprotected files extensions to external apps.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"allow_copy_paste": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow copy paste of mail content.",
							Default:     true,
						},
						"block_forward_attachments": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow share mail attachments with external mails.",
							Default:     false,
						},
						"block_screenshot": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If true - you can't make a screenshot from your app.",
							Default:     false,
						},
						"allowed_domains_forward_attachment": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "exclusion of domains which attachments are allowed to be sent, even that shared policy prevents sharing these kinds of attached files - can contain only English characters, digits, comma, spaces and points.",
						},
						"accept_protected_file_extensions": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Accept protected files with these extensions from external apps to your app.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"accept_unprotected_file_extensions": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Accept unprotected files with these extensions from external apps to your app.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"allow_import_from_gallery": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow import media from gallery.",
							Default:     true,
						},
						"allow_taking_photos_and_videos": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow the camera to be used from your app.",
							Default:     true,
						},
						"offer_capsule_as_viewer": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Offer Capsule as a viewer for external protected documents.",
							Default:     true,
						},
					},
				},
			},
			"harmony_mobile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Integrations settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"protect_policy_enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/disable Protect Application- cannot be enable if Harmony SDK is enable.",
							Default:     false,
						},
						"protect_high_risk_action": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "What is the action if there is high risk found by Harmony Mobile.",
							Default:     "block",
						},
						"protect_high_risk_message": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"protect_medium_risk_action": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "What is the action if there is medium risk found by Harmony Mobile.",
							Default:     "none",
						},
						"protect_medium_risk_message": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"protect_not_activated_action": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "What is the action if there is policy violation (configuration for Harmony Mobile).",
							Default:     "block",
						},
						"protect_not_activated_message": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The message can contain only English characters, digits, comma, spaces and points.",
						},
						"enable_harmony_mobile_sdk": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Enable/disable Harmony SDK - cannot be enable if Harmony Mobile Application is enable.",
							Default:     false,
						},
						"compromised_behavior": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Device configuration - response to malicious behavior (configuration for Harmony SDK).",
							Default:     "block",
						},
						"harmony_mobile_sdk_license": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "License for Harmony Mobile Sdk (configuration for Harmony SDK) - can contain only English characters, digits, comma, spaces and point.",
						},
						"malware_behavior": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Behavior when App is identified as malicious (configuration for Harmony SDK).",
							Default:     "block",
						},
						"man_in_the_middle_attack": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Behavior when there is a network man-in-the-middle attack (configuration for Harmony SDK).",
							Default:     "notify",
						},
						"os_integrity_compromised": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Behavior when Device OS is compromised (configuration for Harmony SDK).",
						},
						"suspicious_app": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Behavior when App is suspected as malicious (configuration for Harmony SDK).",
							Default:     "block",
						},
						"suspicious_enterprise_certificate": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Behavior when a certificate profile has been installed allowing the installing of apps on device from unknown source - iOS only (configuration for Harmony SDK).",
							Default:     "notify",
						},
					},
				},
			},
			"security": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Security settings.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"session_timeout": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Session timeout - you can choose a unit (day, week, month) in \"session-timeout-unit\" field.",
							Default:     1,
						},
						"session_timeout_unit": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unit for \"session-timeout\" numeric value.",
							Default:     "weeks",
						},
						"activate_passcode_lock": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Require passcode to the application.",
							Default:     true,
						},
						"allow_store_credentials": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allow storing the credentials on the device.",
							Default:     false,
						},
						"passcode_profile": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Passcode Policy object identified by the name or UID.",
							Default:     "Restrictive",
						},
						"report_jailbroken": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Issue log when device is detected as jail broken.",
							Default:     true,
						},
						"block_jailbroken": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Action upon detection of jail broken devices.",
							Default:     "none",
						},
						"block_3rd_party_keyboard": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Block 3rd party keyboard.",
							Default:     false,
						},
						"hide_ssl_connect_anyway_button": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Hide connect button on critical SSL trust failures.",
							Default:     false,
						},
					},
				},
			},
			"tags": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Collection of tag identifiers.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"color": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Color of the object. Should be one of existing colors.",
				Default:     "black",
			},
			"comments": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Comments string.",
			},
			"ignore_warnings": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Apply changes ignoring warnings.",
				Default:     false,
			},
			"ignore_errors": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.",
				Default:     false,
			},
		},
	}
}

func createManagementMobileProfile(d *schema.ResourceData, m interface{}) error {
	client := m.(*checkpoint.ApiClient)

	mobileProfile := make(map[string]interface{})

	if v, ok := d.GetOk("name"); ok {
		mobileProfile["name"] = v.(string)
	}

	if v, ok := d.GetOk("applications"); ok {

		res := make(map[string]interface{})
		v := v.([]interface{})
		applicationsMap := v[0].(map[string]interface{})

		if v := applicationsMap["enable_print_mails"]; v != nil {
			res["enable-print-mails"] = v
		}

		if v := applicationsMap["max_attachments_size"]; v != nil {
			res["max-attachments-size"] = v
		}

		if v := applicationsMap["calendar_from_the_last"]; v != nil {
			res["calendar-from-the-last"] = v
		}

		if v := applicationsMap["calendar_from_the_last_unit"]; v != nil {
			res["calendar-from-the-last-unit"] = v
		}

		if v := applicationsMap["calendar_to_the_following"]; v != nil {
			res["calendar-to-the-following"] = v
		}

		if v := applicationsMap["calendar_to_the_following_unit"]; v != nil {
			res["calendar-to-the-following-unit"] = v
		}

		if v := applicationsMap["mail_from_the_last"]; v != nil {
			res["mail-from-the-last"] = v
		}

		if v := applicationsMap["mail_from_the_last_unit"]; v != nil {
			res["mail-from-the-last-unit"] = v
		}

		if v := applicationsMap["synchronize_contacts"]; v != nil {
			res["synchronize-contacts"] = v
		}

		if v := applicationsMap["allow_push_notification"]; v != nil {
			res["allow-push-notification"] = v
		}

		if v := applicationsMap["allow_calendar_sync"]; v != nil {
			res["allow-calendar-sync"] = v
		}

		if v := applicationsMap["allow_contacts_from_global_address_list"]; v != nil {
			res["allow-contacts-from-global-address-list"] = v
		}

		if v := applicationsMap["allow_contacts_from_local_phone"]; v != nil {
			res["allow-contacts-from-local-phone"] = v
		}

		if v := applicationsMap["save_local_web_cache"]; v != nil {
			res["save-local-web-cache"] = v
		}

		if v := applicationsMap["allow_caching_docsec_credentials"]; v != nil {
			res["allow-caching-docsec-credentials"] = v
		}

		if v := applicationsMap["allow_caching_docsec_keys"]; v != nil {
			res["allow-caching-docsec-keys"] = v
		}

		mobileProfile["applications"] = res
	}

	if v, ok := d.GetOk("client_customization"); ok {

		res := make(map[string]interface{})

		v := v.([]interface{})

		clientCustomizationMap := v[0].(map[string]interface{})

		if v := clientCustomizationMap["app_theme_color_dark"]; v != nil {
			res["app-theme-color-dark"] = v
		}

		if v := clientCustomizationMap["app_theme_color_light"]; v != nil {
			res["app-theme-color-light"] = v
		}

		if v := clientCustomizationMap["allow_calendar"]; v != nil {
			res["allow-calendar"] = v
		}

		if v := clientCustomizationMap["allow_contacts"]; v != nil {
			res["allow-contacts"] = v
		}

		if v := clientCustomizationMap["allow_mail"]; v != nil {
			res["allow-mail"] = v
		}

		if v := clientCustomizationMap["allow_notes_sync"]; v != nil {
			res["allow-notes-sync"] = v
		}

		if v := clientCustomizationMap["allow_saved_file_apps"]; v != nil {
			res["allow-saved-file-apps"] = v
		}

		if v := clientCustomizationMap["allow_secure_chat"]; v != nil {
			res["allow-secure-chat"] = v
		}

		if v := clientCustomizationMap["allow_tasks"]; v != nil {
			res["allow-tasks"] = v
		}

		if v := clientCustomizationMap["certificate_expire_message"]; v != nil {
			res["certificate-expire-message"] = v
		}

		mobileProfile["client-customization"] = res
	}

	if v, ok := d.GetOk("data_leak_prevention"); ok {

		res := make(map[string]interface{})

		v := v.([]interface{})

		dataLeakPreventionMap := v[0].(map[string]interface{})

		if v := dataLeakPreventionMap["open_extension_with_external_app"]; v != nil {
			res["open-extension-with-external-app"] = v.(*schema.Set).List()
		}

		if v := dataLeakPreventionMap["share_protected_extension"]; v != nil {
			res["share-protected-extension"] = v.(*schema.Set).List()
		}

		if v := dataLeakPreventionMap["share_unprotected_extension"]; v != nil {
			res["share-unprotected-extension"] = v.(*schema.Set).List()
		}

		if v := dataLeakPreventionMap["allow_copy_paste"]; v != nil {
			res["allow-copy-paste"] = v
		}

		if v := dataLeakPreventionMap["block_forward_attachments"]; v != nil {
			res["block-forward-attachments"] = v
		}

		if v := dataLeakPreventionMap["block_screenshot"]; v != nil {
			res["block-screenshot"] = v
		}

		if v := dataLeakPreventionMap["allowed_domains_forward_attachment"]; v != nil {
			res["allowed-domains-forward-attachment"] = v
		}

		if v := dataLeakPreventionMap["accept_protected_file_extensions"]; v != nil {
			res["accept-protected-file-extensions"] = v.(*schema.Set).List()
		}
		if v := dataLeakPreventionMap["accept_unprotected_file_extensions"]; v != nil {
			res["accept-unprotected-file-extensions"] = v.(*schema.Set).List()
		}

		if v := dataLeakPreventionMap["allow_import_from_gallery"]; v != nil {
			res["allow-import-from-gallery"] = v
		}
		if v := dataLeakPreventionMap["allow_taking_photos_and_videos"]; v != nil {
			res["allow-taking-photos-and-videos"] = v
		}
		if v := dataLeakPreventionMap["offer_capsule_as_viewer"]; v != nil {
			res["offer-capsule-as-viewer"] = v
		}

		mobileProfile["data-leak-prevention"] = res
	}

	if v, ok := d.GetOk("harmony_mobile"); ok {

		res := make(map[string]interface{})

		v := v.([]interface{})

		harmonyMobileMap := v[0].(map[string]interface{})

		if v := harmonyMobileMap["protect_policy_enabled"]; v != nil {
			res["protect-policy-enabled"] = v
		}
		if v := harmonyMobileMap["protect_high_risk_action"]; v != nil {
			res["protect-high-risk-action"] = v
		}
		if v := harmonyMobileMap["protect_high_risk_message"]; v != nil {
			res["protect-high-risk-message"] = v
		}
		if v := harmonyMobileMap["protect_medium_risk_action"]; v != nil {
			res["protect-medium-risk-action"] = v
		}
		if v := harmonyMobileMap["protect_medium_risk_message"]; v != nil {
			res["protect-medium-risk-message"] = v
		}
		if v := harmonyMobileMap["protect_not_activated_action"]; v != nil {
			res["protect-not-activated-action"] = v
		}
		if v := harmonyMobileMap["protect_not_activated_message"]; v != nil {
			res["protect-not-activated-message"] = v
		}
		if v := harmonyMobileMap["enable_harmony_mobile_sdk"]; v != nil {
			res["enable-harmony-mobile-sdk"] = v
		}
		if v := harmonyMobileMap["compromised_behavior"]; v != nil {
			res["compromised-behavior"] = v
		}
		if v := harmonyMobileMap["harmony_mobile_sdk_license"]; v != nil {
			res["harmony-mobile-sdk-license"] = v
		}
		if v := harmonyMobileMap["malware_behavior"]; v != nil {
			res["malware-behavior"] = v
		}
		if v := harmonyMobileMap["man_in_the_middle_attack"]; v != nil {
			res["man-in-the-middle-attack"] = v
		}
		if v := harmonyMobileMap["os_integrity_compromised"]; v != nil {
			res["os-integrity-compromised"] = v
		}
		if v := harmonyMobileMap["suspicious_app"]; v != nil {
			res["suspicious-app"] = v
		}
		if v := harmonyMobileMap["suspicious_enterprise_certificate"]; v != nil {
			res["suspicious-enterprise-certificate"] = v
		}

		mobileProfile["harmony-mobile"] = res
	}

	if v, ok := d.GetOk("security"); ok {

		res := make(map[string]interface{})

		v := v.([]interface{})

		securityMap := v[0].(map[string]interface{})

		if v := securityMap["session_timeout"]; v != nil {
			res["session-timeout"] = v

		}
		if v := securityMap["session_timeout_unit"]; v != nil {
			res["session-timeout-unit"] = v

		}
		if v := securityMap["activate_passcode_lock"]; v != nil {
			res["activate-passcode-lock"] = v

		}
		if v := securityMap["allow_store_credentials"]; v != nil {
			res["allow-store-credentials"] = v

		}
		if v := securityMap["passcode_profile"]; v != nil {
			res["passcode-profile"] = v

		}
		if v := securityMap["report_jailbroken"]; v != nil {
			res["report-jailbroken"] = v

		}
		if v := securityMap["block_jailbroken"]; v != nil {
			res["block-jailbroken"] = v

		}
		if v := securityMap["block_3rd_party_keyboard"]; v != nil {
			res["block-3rd-party-keyboard"] = v

		}
		if v := securityMap["hide_ssl_connect_anyway_button"]; v != nil {
			res["hide-ssl-connect-anyway-button"] = v

		}

		mobileProfile["security"] = res
	}

	if v, ok := d.GetOk("tags"); ok {
		mobileProfile["tags"] = v.(*schema.Set).List()
	}

	if v, ok := d.GetOk("color"); ok {
		mobileProfile["color"] = v.(string)
	}

	if v, ok := d.GetOk("comments"); ok {
		mobileProfile["comments"] = v.(string)
	}

	if v, ok := d.GetOkExists("ignore_warnings"); ok {
		mobileProfile["ignore-warnings"] = v.(bool)
	}

	if v, ok := d.GetOkExists("ignore_errors"); ok {
		mobileProfile["ignore-errors"] = v.(bool)
	}

	log.Println("Create MobileProfile - Map = ", mobileProfile)

	addMobileProfileRes, err := client.ApiCall("add-mobile-profile", mobileProfile, client.GetSessionID(), true, false)
	if err != nil || !addMobileProfileRes.Success {
		if addMobileProfileRes.ErrorMsg != "" {
			return fmt.Errorf(addMobileProfileRes.ErrorMsg)
		}
		return fmt.Errorf(err.Error())
	}

	d.SetId(addMobileProfileRes.GetData()["uid"].(string))

	return readManagementMobileProfile(d, m)
}

func readManagementMobileProfile(d *schema.ResourceData, m interface{}) error {

	client := m.(*checkpoint.ApiClient)

	payload := map[string]interface{}{
		"uid": d.Id(),
	}

	showMobileProfileRes, err := client.ApiCall("show-mobile-profile", payload, client.GetSessionID(), true, false)
	if err != nil {
		return fmt.Errorf(err.Error())
	}
	if !showMobileProfileRes.Success {
		if objectNotFound(showMobileProfileRes.GetData()["code"].(string)) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf(showMobileProfileRes.ErrorMsg)
	}

	mobileProfile := showMobileProfileRes.GetData()

	log.Println("Read MobileProfile - Show JSON = ", mobileProfile)

	if v := mobileProfile["name"]; v != nil {
		_ = d.Set("name", v)
	}

	if mobileProfile["applications"] != nil {

		applicationsMap := mobileProfile["applications"].(map[string]interface{})

		applicationsMapToReturn := make(map[string]interface{})

		if v, _ := applicationsMap["enable-print-mails"]; v != nil {
			applicationsMapToReturn["enable_print_mails"] = v
		}
		if v, _ := applicationsMap["max-attachments-size"]; v != nil {
			applicationsMapToReturn["max_attachments_size"] = v
		}
		if v, _ := applicationsMap["calendar-from-the-last"]; v != nil {
			applicationsMapToReturn["calendar_from_the_last"] = v
		}
		if v, _ := applicationsMap["calendar-from-the-last-unit"]; v != nil {
			applicationsMapToReturn["calendar_from_the_last_unit"] = v
		}
		if v, _ := applicationsMap["calendar-to-the-following"]; v != nil {
			applicationsMapToReturn["calendar_to_the_following"] = v
		}
		if v, _ := applicationsMap["calendar-to-the-following-unit"]; v != nil {
			applicationsMapToReturn["calendar_to_the_following_unit"] = v
		}
		if v, _ := applicationsMap["mail-from-the-last"]; v != nil {
			applicationsMapToReturn["mail_from_the_last"] = v
		}
		if v, _ := applicationsMap["mail-from-the-last-unit"]; v != nil {
			applicationsMapToReturn["mail_from_the_last_unit"] = v
		}
		if v, _ := applicationsMap["synchronize-contacts"]; v != nil {
			applicationsMapToReturn["synchronize_contacts"] = v
		}
		if v, _ := applicationsMap["allow-push-notification"]; v != nil {
			applicationsMapToReturn["allow_push_notification"] = v
		}
		if v, _ := applicationsMap["allow-calendar-sync"]; v != nil {
			applicationsMapToReturn["allow_calendar_sync"] = v
		}
		if v, _ := applicationsMap["allow-contacts-from-global-address-list"]; v != nil {
			applicationsMapToReturn["allow_contacts_from_global_address_list"] = v
		}
		if v, _ := applicationsMap["allow-contacts-from-local-phone"]; v != nil {
			applicationsMapToReturn["allow_contacts_from_local_phone"] = v
		}
		if v, _ := applicationsMap["save-local-web-cache"]; v != nil {
			applicationsMapToReturn["save_local_web_cache"] = v
		}
		if v, _ := applicationsMap["allow-caching-docsec-credentials"]; v != nil {
			applicationsMapToReturn["allow_caching_docsec_credentials"] = v
		}
		if v, _ := applicationsMap["allow-caching-docsec-keys"]; v != nil {
			applicationsMapToReturn["allow_caching_docsec_keys"] = v
		}
		_ = d.Set("applications", []interface{}{applicationsMapToReturn})
	} else {
		_ = d.Set("applications", nil)
	}

	if mobileProfile["client-customization"] != nil {

		clientCustomizationMap := mobileProfile["client-customization"].(map[string]interface{})

		clientCustomizationMapToReturn := make(map[string]interface{})

		if v, _ := clientCustomizationMap["app-theme-color-dark"]; v != nil {
			clientCustomizationMapToReturn["app_theme_color_dark"] = v
		}
		if v, _ := clientCustomizationMap["app-theme-color-light"]; v != nil {
			clientCustomizationMapToReturn["app_theme_color_light"] = v
		}
		if v, _ := clientCustomizationMap["allow-calendar"]; v != nil {
			clientCustomizationMapToReturn["allow_calendar"] = v
		}
		if v, _ := clientCustomizationMap["allow-contacts"]; v != nil {
			clientCustomizationMapToReturn["allow_contacts"] = v
		}
		if v, _ := clientCustomizationMap["allow-mail"]; v != nil {
			clientCustomizationMapToReturn["allow_mail"] = v
		}
		if v, _ := clientCustomizationMap["allow-notes-sync"]; v != nil {
			clientCustomizationMapToReturn["allow_notes_sync"] = v
		}
		if v, _ := clientCustomizationMap["allow-saved-file-apps"]; v != nil {
			clientCustomizationMapToReturn["allow_saved_file_apps"] = v
		}
		if v, _ := clientCustomizationMap["allow-secure-chat"]; v != nil {
			clientCustomizationMapToReturn["allow_secure_chat"] = v
		}
		if v, _ := clientCustomizationMap["allow-tasks"]; v != nil {
			clientCustomizationMapToReturn["allow_tasks"] = v
		}
		if v, _ := clientCustomizationMap["certificate-expire-message"]; v != nil {
			clientCustomizationMapToReturn["certificate_expire_message"] = v
		}
		_ = d.Set("client_customization", []interface{}{clientCustomizationMapToReturn})
	} else {
		_ = d.Set("client_customization", nil)
	}

	if mobileProfile["data-leak-prevention"] != nil {

		dataLeakPreventionMap := mobileProfile["data-leak-prevention"].(map[string]interface{})

		dataLeakPreventionMapToReturn := make(map[string]interface{})

		if v, _ := dataLeakPreventionMap["open-extension-with-external-app"]; v != nil {
			dataLeakPreventionMapToReturn["open_extension_with_external_app"] = v
		}
		if v, _ := dataLeakPreventionMap["share-protected-extension"]; v != nil {
			dataLeakPreventionMapToReturn["share_protected_extension"] = v
		}
		if v, _ := dataLeakPreventionMap["share-unprotected-extension"]; v != nil {
			dataLeakPreventionMapToReturn["share_unprotected_extension"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-copy-paste"]; v != nil {
			dataLeakPreventionMapToReturn["allow_copy_paste"] = v
		}
		if v, _ := dataLeakPreventionMap["block-forward-attachments"]; v != nil {
			dataLeakPreventionMapToReturn["block_forward_attachments"] = v
		}
		if v, _ := dataLeakPreventionMap["block-screenshot"]; v != nil {
			dataLeakPreventionMapToReturn["block_screenshot"] = v
		}
		if v, _ := dataLeakPreventionMap["allowed-domains-forward-attachment"]; v != nil {
			dataLeakPreventionMapToReturn["allowed_domains_forward_attachment"] = v
		}
		if v, _ := dataLeakPreventionMap["accept-protected-file-extensions"]; v != nil {
			dataLeakPreventionMapToReturn["accept_protected_file_extensions"] = v
		}
		if v, _ := dataLeakPreventionMap["accept-unprotected-file-extensions"]; v != nil {
			dataLeakPreventionMapToReturn["accept_unprotected_file_extensions"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-import-from-gallery"]; v != nil {
			dataLeakPreventionMapToReturn["allow_import_from_gallery"] = v
		}
		if v, _ := dataLeakPreventionMap["allow-taking-photos-and-videos"]; v != nil {
			dataLeakPreventionMapToReturn["allow_taking_photos_and_videos"] = v
		}
		if v, _ := dataLeakPreventionMap["offer-capsule-as-viewer"]; v != nil {
			dataLeakPreventionMapToReturn["offer_capsule_as_viewer"] = v
		}
		_ = d.Set("data_leak_prevention", []interface{}{dataLeakPreventionMapToReturn})
	} else {
		_ = d.Set("data_leak_prevention", nil)
	}

	if mobileProfile["harmony-mobile"] != nil {

		harmonyMobileMap := mobileProfile["harmony-mobile"].(map[string]interface{})

		harmonyMobileMapToReturn := make(map[string]interface{})

		if v, _ := harmonyMobileMap["protect-policy-enabled"]; v != nil {
			harmonyMobileMapToReturn["protect_policy_enabled"] = v
		}
		if v, _ := harmonyMobileMap["protect-high-risk-action"]; v != nil {
			harmonyMobileMapToReturn["protect_high_risk_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-high-risk-message"]; v != nil {
			harmonyMobileMapToReturn["protect_high_risk_message"] = v
		}
		if v, _ := harmonyMobileMap["protect-medium-risk-action"]; v != nil {
			harmonyMobileMapToReturn["protect_medium_risk_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-medium-risk-message"]; v != nil {
			harmonyMobileMapToReturn["protect_medium_risk_message"] = v
		}
		if v, _ := harmonyMobileMap["protect-not-activated-action"]; v != nil {
			harmonyMobileMapToReturn["protect_not_activated_action"] = v
		}
		if v, _ := harmonyMobileMap["protect-not-activated-message"]; v != nil {
			harmonyMobileMapToReturn["protect_not_activated_message"] = v
		}
		if v, _ := harmonyMobileMap["enable-harmony-mobile-sdk"]; v != nil {
			harmonyMobileMapToReturn["enable_harmony_mobile_sdk"] = v
		}
		if v, _ := harmonyMobileMap["compromised-behavior"]; v != nil {
			harmonyMobileMapToReturn["compromised_behavior"] = v
		}
		if v, _ := harmonyMobileMap["harmony-mobile-sdk-license"]; v != nil {
			harmonyMobileMapToReturn["harmony_mobile_sdk_license"] = v
		}
		if v, _ := harmonyMobileMap["malware-behavior"]; v != nil {
			harmonyMobileMapToReturn["malware_behavior"] = v
		}
		if v, _ := harmonyMobileMap["man-in-the-middle-attack"]; v != nil {
			harmonyMobileMapToReturn["man_in_the_middle_attack"] = v
		}
		if v, _ := harmonyMobileMap["os-integrity-compromised"]; v != nil {
			harmonyMobileMapToReturn["os_integrity_compromised"] = v
		}
		if v, _ := harmonyMobileMap["suspicious-app"]; v != nil {
			harmonyMobileMapToReturn["suspicious_app"] = v
		}
		if v, _ := harmonyMobileMap["suspicious-enterprise-certificate"]; v != nil {
			harmonyMobileMapToReturn["suspicious_enterprise_certificate"] = v
		}
		_ = d.Set("harmony_mobile", []interface{}{harmonyMobileMapToReturn})
	} else {
		_ = d.Set("harmony_mobile", nil)
	}

	if mobileProfile["security"] != nil {

		securityMap := mobileProfile["security"].(map[string]interface{})

		securityMapToReturn := make(map[string]interface{})

		if v, _ := securityMap["session-timeout"]; v != nil {
			securityMapToReturn["session_timeout"] = v
		}
		if v, _ := securityMap["session-timeout-unit"]; v != nil {
			securityMapToReturn["session_timeout_unit"] = v
		}
		if v, _ := securityMap["activate-passcode-lock"]; v != nil {
			securityMapToReturn["activate_passcode_lock"] = v
		}
		if v, _ := securityMap["allow-store-credentials"]; v != nil {
			securityMapToReturn["allow_store_credentials"] = v
		}
		if v, _ := securityMap["passcode-profile"]; v != nil {

			localMap := v.(map[string]interface{})

			if name := localMap["name"]; name != nil {
				securityMapToReturn["passcode_profile"] = name
			}

		}
		if v, _ := securityMap["report-jailbroken"]; v != nil {
			securityMapToReturn["report_jailbroken"] = v
		}
		if v, _ := securityMap["block-jailbroken"]; v != nil {
			securityMapToReturn["block_jailbroken"] = v
		}
		if v, _ := securityMap["block-3rd-party-keyboard"]; v != nil {
			securityMapToReturn["block_3rd_party_keyboard"] = v
		}
		if v, _ := securityMap["hide-ssl-connect-anyway-button"]; v != nil {
			securityMapToReturn["hide_ssl_connect_anyway_button"] = v
		}
		_ = d.Set("security", []interface{}{securityMapToReturn})
	} else {
		_ = d.Set("security", nil)
	}

	if mobileProfile["tags"] != nil {
		tagsJson, ok := mobileProfile["tags"].([]interface{})
		if ok {
			tagsIds := make([]string, 0)
			if len(tagsJson) > 0 {
				for _, tags := range tagsJson {
					tags := tags.(map[string]interface{})
					tagsIds = append(tagsIds, tags["name"].(string))
				}
			}
			_ = d.Set("tags", tagsIds)
		}
	} else {
		_ = d.Set("tags", nil)
	}

	if v := mobileProfile["color"]; v != nil {
		_ = d.Set("color", v)
	}

	if v := mobileProfile["comments"]; v != nil {
		_ = d.Set("comments", v)
	}

	if v := mobileProfile["ignore-warnings"]; v != nil {
		_ = d.Set("ignore_warnings", v)
	}

	if v := mobileProfile["ignore-errors"]; v != nil {
		_ = d.Set("ignore_errors", v)
	}

	return nil

}

func updateManagementMobileProfile(d *schema.ResourceData, m interface{}) error {

	client := m.(*checkpoint.ApiClient)
	mobileProfile := make(map[string]interface{})

	if ok := d.HasChange("name"); ok {
		oldName, newName := d.GetChange("name")
		mobileProfile["name"] = oldName
		mobileProfile["new-name"] = newName
	} else {
		mobileProfile["name"] = d.Get("name")
	}

	if d.HasChange("applications") {

		if v, ok := d.GetOk("applications"); ok {

			res := make(map[string]interface{})
			v := v.([]interface{})
			applicationsMap := v[0].(map[string]interface{})

			if v := applicationsMap["enable_print_mails"]; v != nil {
				res["enable-print-mails"] = v
			}

			if v := applicationsMap["max_attachments_size"]; v != nil {
				res["max-attachments-size"] = v
			}

			if v := applicationsMap["calendar_from_the_last"]; v != nil {
				res["calendar-from-the-last"] = v
			}

			if v := applicationsMap["calendar_from_the_last_unit"]; v != nil {
				res["calendar-from-the-last-unit"] = v
			}

			if v := applicationsMap["calendar_to_the_following"]; v != nil {
				res["calendar-to-the-following"] = v
			}

			if v := applicationsMap["calendar_to_the_following_unit"]; v != nil {
				res["calendar-to-the-following-unit"] = v
			}

			if v := applicationsMap["mail_from_the_last"]; v != nil {
				res["mail-from-the-last"] = v
			}

			if v := applicationsMap["mail_from_the_last_unit"]; v != nil {
				res["mail-from-the-last-unit"] = v
			}

			if v := applicationsMap["synchronize_contacts"]; v != nil {
				res["synchronize-contacts"] = v
			}

			if v := applicationsMap["allow_push_notification"]; v != nil {
				res["allow-push-notification"] = v
			}

			if v := applicationsMap["allow_calendar_sync"]; v != nil {
				res["allow-calendar-sync"] = v
			}

			if v := applicationsMap["allow_contacts_from_global_address_list"]; v != nil {
				res["allow-contacts-from-global-address-list"] = v
			}

			if v := applicationsMap["allow_contacts_from_local_phone"]; v != nil {
				res["allow-contacts-from-local-phone"] = v
			}

			if v := applicationsMap["save_local_web_cache"]; v != nil {
				res["save-local-web-cache"] = v
			}

			if v := applicationsMap["allow_caching_docsec_credentials"]; v != nil {
				res["allow-caching-docsec-credentials"] = v
			}

			if v := applicationsMap["allow_caching_docsec_keys"]; v != nil {
				res["allow-caching-docsec-keys"] = v
			}

			mobileProfile["applications"] = res
		}
	}

	if d.HasChange("client_customization") {

		if v, ok := d.GetOk("client_customization"); ok {

			res := make(map[string]interface{})

			v := v.([]interface{})

			clientCustomizationMap := v[0].(map[string]interface{})

			if v := clientCustomizationMap["app_theme_color_dark"]; v != nil {
				res["app-theme-color-dark"] = v
			}

			if v := clientCustomizationMap["app_theme_color_light"]; v != nil {
				res["app-theme-color-light"] = v
			}

			if v := clientCustomizationMap["allow_calendar"]; v != nil {
				res["allow-calendar"] = v
			}

			if v := clientCustomizationMap["allow_contacts"]; v != nil {
				res["allow-contacts"] = v
			}

			if v := clientCustomizationMap["allow_mail"]; v != nil {
				res["allow-mail"] = v
			}

			if v := clientCustomizationMap["allow_notes_sync"]; v != nil {
				res["allow-notes-sync"] = v
			}

			if v := clientCustomizationMap["allow_saved_file_apps"]; v != nil {
				res["allow-saved-file-apps"] = v
			}

			if v := clientCustomizationMap["allow_secure_chat"]; v != nil {
				res["allow-secure-chat"] = v
			}

			if v := clientCustomizationMap["allow_tasks"]; v != nil {
				res["allow-tasks"] = v
			}

			if v := clientCustomizationMap["certificate_expire_message"]; v != nil {
				res["certificate-expire-message"] = v
			}

			mobileProfile["client-customization"] = res

		}

	}

	if d.HasChange("data_leak_prevention") {

		if v, ok := d.GetOk("data_leak_prevention"); ok {

			res := make(map[string]interface{})

			v := v.([]interface{})

			dataLeakPreventionMap := v[0].(map[string]interface{})

			if v := dataLeakPreventionMap["open_extension_with_external_app"]; v != nil {
				res["open-extension-with-external-app"] = v.(*schema.Set).List()
			}

			if v := dataLeakPreventionMap["share_protected_extension"]; v != nil {
				res["share-protected-extension"] = v.(*schema.Set).List()
			}

			if v := dataLeakPreventionMap["share_unprotected_extension"]; v != nil {
				res["share-unprotected-extension"] = v.(*schema.Set).List()
			}

			if v := dataLeakPreventionMap["allow_copy_paste"]; v != nil {
				res["allow-copy-paste"] = v
			}

			if v := dataLeakPreventionMap["block_forward_attachments"]; v != nil {
				res["block-forward-attachments"] = v
			}

			if v := dataLeakPreventionMap["block_screenshot"]; v != nil {
				res["block-screenshot"] = v
			}

			if v := dataLeakPreventionMap["allowed_domains_forward_attachment"]; v != nil {
				res["allowed-domains-forward-attachment"] = v
			}

			if v := dataLeakPreventionMap["accept_protected_file_extensions"]; v != nil {
				res["accept-protected-file-extensions"] = v.(*schema.Set).List()
			}
			if v := dataLeakPreventionMap["accept_unprotected_file_extensions"]; v != nil {
				res["accept-unprotected-file-extensions"] = v.(*schema.Set).List()
			}

			if v := dataLeakPreventionMap["allow_import_from_gallery"]; v != nil {
				res["allow-import-from-gallery"] = v
			}
			if v := dataLeakPreventionMap["allow_taking_photos_and_videos"]; v != nil {
				res["allow-taking-photos-and-videos"] = v
			}
			if v := dataLeakPreventionMap["offer_capsule_as_viewer"]; v != nil {
				res["offer-capsule-as-viewer"] = v
			}

			mobileProfile["data-leak-prevention"] = res
		}
	}

	if d.HasChange("harmony_mobile") {

		if v, ok := d.GetOk("harmony_mobile"); ok {

			res := make(map[string]interface{})

			v := v.([]interface{})

			harmonyMobileMap := v[0].(map[string]interface{})

			if v := harmonyMobileMap["protect_policy_enabled"]; v != nil {
				res["protect-policy-enabled"] = v
			}
			if v := harmonyMobileMap["protect_high_risk_action"]; v != nil {
				res["protect-high-risk-action"] = v
			}
			if v := harmonyMobileMap["protect_high_risk_message"]; v != nil {
				res["protect-high-risk-message"] = v
			}
			if v := harmonyMobileMap["protect_medium_risk_action"]; v != nil {
				res["protect-medium-risk-action"] = v
			}
			if v := harmonyMobileMap["protect_medium_risk_message"]; v != nil {
				res["protect-medium-risk-message"] = v
			}
			if v := harmonyMobileMap["protect_not_activated_action"]; v != nil {
				res["protect-not-activated-action"] = v
			}
			if v := harmonyMobileMap["protect_not_activated_message"]; v != nil {
				res["protect-not-activated-message"] = v
			}
			if v := harmonyMobileMap["enable_harmony_mobile_sdk"]; v != nil {
				res["enable-harmony-mobile-sdk"] = v
			}
			if v := harmonyMobileMap["compromised_behavior"]; v != nil {
				res["compromised-behavior"] = v
			}
			if v := harmonyMobileMap["harmony_mobile_sdk_license"]; v != nil {
				res["harmony-mobile-sdk-license"] = v
			}
			if v := harmonyMobileMap["malware_behavior"]; v != nil {
				res["malware-behavior"] = v
			}
			if v := harmonyMobileMap["man_in_the_middle_attack"]; v != nil {
				res["man-in-the-middle-attack"] = v
			}
			if v := harmonyMobileMap["os_integrity_compromised"]; v != nil {
				res["os-integrity-compromised"] = v
			}
			if v := harmonyMobileMap["suspicious_app"]; v != nil {
				res["suspicious-app"] = v
			}
			if v := harmonyMobileMap["suspicious_enterprise_certificate"]; v != nil {
				res["suspicious-enterprise-certificate"] = v
			}

			mobileProfile["harmony-mobile"] = res
		}
	}

	if d.HasChange("security") {

		if v, ok := d.GetOk("security"); ok {

			res := make(map[string]interface{})

			v := v.([]interface{})

			securityMap := v[0].(map[string]interface{})

			if v := securityMap["session_timeout"]; v != nil {
				res["session-timeout"] = v

			}
			if v := securityMap["session_timeout_unit"]; v != nil {
				res["session-timeout-unit"] = v

			}
			if v := securityMap["activate_passcode_lock"]; v != nil {
				res["activate-passcode-lock"] = v

			}
			if v := securityMap["allow_store_credentials"]; v != nil {
				res["allow-store-credentials"] = v

			}
			if v := securityMap["passcode_profile"]; v != nil {
				res["passcode-profile"] = v

			}
			if v := securityMap["report_jailbroken"]; v != nil {
				res["report-jailbroken"] = v

			}
			if v := securityMap["block_jailbroken"]; v != nil {
				res["block-jailbroken"] = v

			}
			if v := securityMap["block_3rd_party_keyboard"]; v != nil {
				res["block-3rd-party-keyboard"] = v

			}
			if v := securityMap["hide_ssl_connect_anyway_button"]; v != nil {
				res["hide-ssl-connect-anyway-button"] = v

			}

			mobileProfile["security"] = res
		}
	}

	if d.HasChange("tags") {
		if v, ok := d.GetOk("tags"); ok {
			mobileProfile["tags"] = v.(*schema.Set).List()
		} else {
			oldTags, _ := d.GetChange("tags")
			mobileProfile["tags"] = map[string]interface{}{"remove": oldTags.(*schema.Set).List()}
		}
	}

	if ok := d.HasChange("color"); ok {
		mobileProfile["color"] = d.Get("color")
	}

	if ok := d.HasChange("comments"); ok {
		mobileProfile["comments"] = d.Get("comments")
	}

	if v, ok := d.GetOkExists("ignore_warnings"); ok {
		mobileProfile["ignore-warnings"] = v.(bool)
	}

	if v, ok := d.GetOkExists("ignore_errors"); ok {
		mobileProfile["ignore-errors"] = v.(bool)
	}

	log.Println("Update MobileProfile - Map = ", mobileProfile)

	updateMobileProfileRes, err := client.ApiCall("set-mobile-profile", mobileProfile, client.GetSessionID(), true, false)
	if err != nil || !updateMobileProfileRes.Success {
		if updateMobileProfileRes.ErrorMsg != "" {
			return fmt.Errorf(updateMobileProfileRes.ErrorMsg)
		}
		return fmt.Errorf(err.Error())
	}

	return readManagementMobileProfile(d, m)
}

func deleteManagementMobileProfile(d *schema.ResourceData, m interface{}) error {

	client := m.(*checkpoint.ApiClient)

	mobileProfilePayload := map[string]interface{}{
		"uid": d.Id(),
	}

	log.Println("Delete MobileProfile")

	deleteMobileProfileRes, err := client.ApiCall("delete-mobile-profile", mobileProfilePayload, client.GetSessionID(), true, false)
	if err != nil || !deleteMobileProfileRes.Success {
		if deleteMobileProfileRes.ErrorMsg != "" {
			return fmt.Errorf(deleteMobileProfileRes.ErrorMsg)
		}
		return fmt.Errorf(err.Error())
	}
	d.SetId("")

	return nil
}
