package checkpoint

import (
	"fmt"
	checkpoint "github.com/CheckPointSW/cp-mgmt-api-go-sdk/APIFiles"
	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourceManagementSetAntiMalwareUpdateSchedule() *schema.Resource {
	return &schema.Resource{
		Create: createManagementSetAntiMalwareUpdateSchedule,
		Read:   readManagementSetAntiMalwareUpdateSchedule,
		Delete: deleteManagementSetAntiMalwareUpdateSchedule,
		Schema: map[string]*schema.Schema{
			"enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Description: "Enable/Disable Anti-Malware Update Schedule.",
			},
			"schedule": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Schedule Configuration.",
				ForceNew:    true,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Time in format HH:mm.",
						},
						"recurrence": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Days recurrence.",
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"pattern": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Days recurrence pattern.",
									},
									"interval_hours": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "The amount of hours between updates. Required only when pattern is set to 'Interval'.",
									},
									"interval_minutes": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "The amount of minutes between updates. Required only when pattern is set to 'Interval'.",
									},
									"interval_seconds": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "The amount of seconds between updates. Required only when pattern is set to 'Interval'.",
									},
									"weekdays": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: "Days of the week to run the update. Valid values: group of values from {'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'}. Required only when pattern is set to 'Weekly'.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"days": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: "Days of the month to run the update. Valid values: interval in the range of 1 to 31. Required only when pattern is set to 'Monthly'.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func createManagementSetAntiMalwareUpdateSchedule(d *schema.ResourceData, m interface{}) error {
	client := m.(*checkpoint.ApiClient)

	var payload = map[string]interface{}{}
	if v, ok := d.GetOkExists("enabled"); ok {
		payload["enabled"] = v.(bool)
	}

	if v, ok := d.GetOk("schedule"); ok {

		scheduleList := v.([]interface{})

		if len(scheduleList) > 0 {

			schedulePayload := make(map[string]interface{})

			if v, ok := d.GetOk("schedule.0.time"); ok {
				schedulePayload["time"] = v.(string)
			}

			if _, ok := d.GetOk("schedule.0.recurrence"); ok {

				recurrencePayLoad := make(map[string]interface{})

				if v, ok := d.GetOk("schedule.0.recurrence.0.pattern"); ok {
					recurrencePayLoad["pattern"] = v.(string)
				}
				if v, ok := d.GetOk("schedule.0.recurrence.0.interval_hours"); ok {
					recurrencePayLoad["interval-hours"] = v.(int)
				}
				if v, ok := d.GetOk("schedule.0.recurrence.0.interval_minutes"); ok {
					recurrencePayLoad["interval-minutes"] = v.(int)
				}
				if v, ok := d.GetOk("schedule.0.recurrence.0.interval_seconds"); ok {
					recurrencePayLoad["interval-seconds"] = v.(int)
				}
				if v, ok := d.GetOk("schedule.0.recurrence.0.weekdays"); ok {
					recurrencePayLoad["weekdays"] = v.(*schema.Set).List()
				}
				if v, ok := d.GetOk("schedule.0.recurrence.0.days"); ok {
					recurrencePayLoad["days"] = v.(*schema.Set).List()
				}

				schedulePayload["recurrence"] = recurrencePayLoad
			}
			payload["schedule"] = schedulePayload
		}
	}

	SetAntiMalwareUpdateScheduleRes, err := client.ApiCallSimple("set-anti-malware-update-schedule", payload)
	if err != nil {
		return fmt.Errorf(err.Error())
	}
	if !SetAntiMalwareUpdateScheduleRes.Success {
		return fmt.Errorf(SetAntiMalwareUpdateScheduleRes.ErrorMsg)
	}

	d.SetId("set-anti-malware-update-schedule-" + acctest.RandString(10))
	return readManagementSetAntiMalwareUpdateSchedule(d, m)
}

func readManagementSetAntiMalwareUpdateSchedule(d *schema.ResourceData, m interface{}) error {

	return nil
}

func deleteManagementSetAntiMalwareUpdateSchedule(d *schema.ResourceData, m interface{}) error {

	d.SetId("")
	return nil
}
